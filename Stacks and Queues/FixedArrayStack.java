import java.util.EmptyStackException;/**   A stack data structure implemented via a fixed array.   @author Eli Zupke   @version 1.0*/public class FixedArrayStack<T> implements StackInterface<T>{	//TODO: comment better!	private static final int DEFAULT_CAPACITY = 10;		// This array contains all elements in the stack	private T[] fixedArray;	// This is the number of elements currently in the stack	private int numEntries;		public FixedArrayStack() {		this(DEFAULT_CAPACITY);	}		public FixedArrayStack(int capacity) {		        @SuppressWarnings("unchecked")        T[] tempArray = (T[])new Object[capacity]; // Unchecked cast		fixedArray = tempArray;		numEntries = 0;	}		/** Adds a new entry to the top of this stack.	   @param newEntry  An object to be added to the stack. */	public void push(T newEntry) {		if (numEntries == fixedArray.length) {			throw new IllegalStateException("Stack full!");		} else {			fixedArray[numEntries] = newEntry;			numEntries += 1;		}	}	/** Removes and returns this stack's top entry.	   @return  The object at the top of the stack. 	   @throws  EmptyStackException if the stack is empty before the operation. */	public T pop() {		if (isEmpty()) {			throw new EmptyStackException();		} else {			T poppedElement = fixedArray[numEntries - 1];			fixedArray[numEntries - 1] = null;			numEntries -= 1;			return poppedElement;		}			}	/** Retrieves this stack's top entry.	   @return  The object at the top of the stack.	   @throws  EmptyStackException if the stack is empty. */	public T peek() {		if (isEmpty()) {			throw new EmptyStackException();		} else {			return fixedArray[numEntries - 1];		}	}	/** Detects whether this stack is empty.	   @return  True if the stack is empty. */	public boolean isEmpty() {		return (numEntries == 0);	}	/** Removes all entries from this stack. */	public void clear() {		for (int i = 0; i < fixedArray.length; i++) {			fixedArray[i] = null;		}		numEntries = 0;	}}