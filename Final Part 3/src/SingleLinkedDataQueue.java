import java.util.Iterator;import java.util.NoSuchElementException;/**   A queue implemeneted with single linked data    @author Eli Zupke   @version 1.0 */public class SingleLinkedDataQueue<T> implements QueueInterface<T>{		Node<T> top;		public SingleLinkedDataQueue() {		        top = null;	}	/** Adds a new entry to the back of this queue.      @param newEntry  An object to be added. */	public void enqueue(T newEntry) {				// Create the new node that we will add		Node<T> addedNode = new Node<T>(newEntry);				// Add this node to the end of the queue and set it to the top.		addedNode.setNextNode(top);		top = addedNode;	}	/** Removes and returns the entry at the front of this queue.      @return  The object at the front of the queue.       @throws  EmptyQueueException if the queue is empty before the operation. */	public T dequeue() {		if (isEmpty()) {			throw new EmptyQueueException();		} else {			Node<T> prevNode = null;			Node<T> thisNode = top;						// We need to loop through the enitre queue to find the top.			while(true) {				if (thisNode.getNextNode() == null) {					// We have found the front of the queue					// We remove this node from the chain by setting the previous node's next node to null					if (prevNode == null) {						// This is a special case; we must set top to null						top = null;					} else {						prevNode.setNextNode(null);					}										return thisNode.getData();				} else {					// We are still in the middle of the queue; we must go further					prevNode = thisNode;					thisNode = thisNode.getNextNode();				}			}		}	}	/**  Retrieves the entry at the front of this queue.      @return  The object at the front of the queue.      @throws  EmptyQueueException if the queue is empty. */	public T getFront() {		if (isEmpty()) {			throw new EmptyQueueException();		} else {			Node<T> thisNode = top;						// Loop through the entire queue			while(true) {				if (thisNode.getNextNode() == null) {					// We have found the front of the queue					return thisNode.getData();				} else {					// We must continue to the next node					thisNode = thisNode.getNextNode();				}			}		}	}			/** Detects whether this queue is empty.      @return  True if the queue is empty, or false otherwise. */	public boolean isEmpty() {				return (top == null);			}	/** Removes all entries from this queue. */	public void clear() {		// We can clear the queue by dereferencing the top node.		top = null;	}		/**	 * Returns an iterator that iterates over the stack's values. Removal is not supported.	 * (This functionality was added during the final!)	 * @return An iterator of type T that iterates over the stack's values	 */	public Iterator<T> getIterator() {		return new SingledLinkedDataQueueIterator();	}		private class SingledLinkedDataQueueIterator implements Iterator<T> {		// The node we just gave		Node<T> prevNode = null;		// The node we are about to give		Node<T> curNode = top;		@Override		public boolean hasNext() {			return curNode != null;		}		@Override		public T next() {			if (!hasNext()) {				throw new NoSuchElementException();			}			prevNode = curNode;			curNode = curNode.getNextNode();			return prevNode.getData();		}		@Override		public void remove() {			throw new UnsupportedOperationException();		}		}				} // end QueueInterface